# -*- coding: utf-8 -*-
"""bear_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M1nHZLMtG7cMor2Gcxje1YS9-3SWORtB
"""

!pip install bing-image-downloader

!mkdir images

from bing_image_downloader import downloader
downloader.download("grizzly bear", limit=5,  output_dir='images', adult_filter_off=True, force_replace=False)

from fastai.vision.all import *

dir_images = 'images/grizzly bear'
im = Image.open(dir_images+'/Image_1.jpg')

im

im.to_thumb(128,128)

# Define the bear types
bear_types = ['grizzly', 'black', 'teddy']

# Define the main directory
path = Path('bears')

# Create the main directory if it doesn't exist
path.mkdir(exist_ok=True)

for bear in bear_types:
    dest = path

    downloader.download(
        f"{bear} bear",
        limit=100,
        output_dir=str(dest),
        adult_filter_off=True,
        force_replace=False
    )

print("Image download complete!")

from pathlib import Path

### refine the files and names of the directories

path = "/content/bears/"

## change the name of the directories
for o in bear_types:
  try:
    os.rename(path + f"{o} bear", path + f"{o}")
  except:
    pass

## change the name of the each file

for o in bear_types:
  dir_path = Path(path + f"{o}")

  if dir_path.exists() and dir_path.is_dir():
        for i, file in enumerate(dir_path.iterdir(), start=1):
            new_name = dir_path / f"{o}_{i}{file.suffix}"
            file.rename(new_name)
            print(f"Renamed {file} to {new_name}")
  else:
      print(f"The directory {dir_path} does not exist or is not a directory.")

fns = get_image_files(path)
fns

failed = verify_images(fns)

failed

bears = DataBlock(
    blocks=(ImageBlock, CategoryBlock),
    get_items=get_image_files,
    splitter=RandomSplitter(valid_pct=0.2, seed=42),
    get_y=parent_label,
    item_tfms=Resize(128)
)

dls = bears.dataloaders(path)

dls.valid.show_batch(max_n=4, nrows=1)

bears = bears.new(item_tfms=Resize(128, ResizeMethod.Squish))
dls = bears.dataloaders(path)
dls.valid.show_batch(max_n=4, nrows=1)

bears = bears.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode='zeros'))
dls = bears.dataloaders(path)
dls.valid.show_batch(max_n=4, nrows=1)

bears = bears.new(item_tfms=RandomResizedCrop(128, min_scale=0.3))
dls = bears.dataloaders(path)
dls.train.show_batch(max_n=4, nrows=1)

dls.train.show_batch(max_n=4, nrows=1, unique=True)

bears = bears.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2))
dls = bears.dataloaders(path)
dls.train.show_batch(max_n=8, nrows=2, unique=True)

bears = bears.new(
    item_tfms=RandomResizedCrop(224, min_scale=0.5),
    batch_tfms=aug_transforms()
)
dls = bears.dataloaders(path)

learn = cnn_learner(dls, resnet18, metrics=error_rate)
learn.fine_tune(4)

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix()

# Access the confusion matrix and calculate accuracy manually
correct, total = interp.confusion_matrix().trace(), interp.confusion_matrix().sum()
accuracy = correct / total
print(f'Accuracy: {accuracy}')

interp.plot_top_losses(5, nrows=1)

from fastai.vision.widgets import ImageClassifierCleaner

cleaner = ImageClassifierCleaner(learn)
cleaner

cleaner.delete()

for idx in cleaner.delete(): cleaner.fns[idx].unlink()
### if they are in the different category we should move the files into another directory
for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat)

learn.export()

path = Path()
path.ls(file_exts='.pkl')

#### create an inference / to use a model to get the predictions

learn_inf = load_learner(path/'export.pkl')

learn_inf.predict('/content/bears/grizzly/grizzly_10.jpg')

learn_inf.dls.vocab

!pip install ipywidgets
import ipywidgets as widgets

btn_upload = widgets.FileUpload()
btn_upload

img = PILImage.create(btn_upload.data[-1])

img

out_pl = widgets.Output()
out_pl.clear_output()
with out_pl: display(img.to_thumb(128,128))
out_pl

pred,pred_idx,probs = learn_inf.predict(img)

btn_run = widgets.Button(description='Classify')
btn_run

from ipywidgets import VBox, widgets

lbl_pred = widgets.Label()

def on_click_classify(change):
 img = PILImage.create(btn_upload.data[-1])
 out_pl.clear_output()
 with out_pl: display(img.to_thumb(128,128))
 pred,pred_idx,probs = learn_inf.predict(img)
 lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'
btn_run.on_click(on_click_classify)

VBox([widgets.Label('Select your bear!'),
 btn_upload, btn_run, out_pl, lbl_pred])

